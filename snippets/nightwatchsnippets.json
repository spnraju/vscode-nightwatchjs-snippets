{
  "attributeContains": {
    "prefix": "nwattributeContains",
    "body": "attributeContains(${1:selector}, ${2:attribute}, ${3:expected}, ${4:optionalMessage})",
    "description": "Checks if the given attribute of an element contains the expected value"
  },
  "attributeEquals": {
    "prefix": "nwattributeEquals",
    "body": "attributeEquals(${1:selector}, ${2:attribute}, ${3:expected}, ${4:optionalMessage})",
    "description": "Checks if the given attribute of an element has the expected value"
  },
  "containsText": {
    "prefix": "nwcontainsText",
    "body": "containsText(${1:selector}, ${2:expectedText}, ${3:optionalMessage})",
    "description": "Checks if the given element contains the specified text"
  },
  "cssClassPresent": {
    "prefix": "nwcssClassPresent",
    "body": "cssClassPresent(${1:selector}, ${2:className}, ${3:optionalMessage})",
    "description": "Checks if the given element has the specified CSS class"
  },
  "cssClassNotPresent": {
    "prefix": "nwcssClassNotPresent",
    "body": "cssClassNotPresent(${1:selector}, ${2:className}, ${3:optionalMessage})",
    "description": "Checks if the given element does not have the specified CSS class"
  },
  "cssProperty": {
    "prefix": "nwcssProperty",
    "body": "cssProperty(${1:selector}, ${2:cssProperty}, ${3:expected}, ${4:optionalMessage})",
    "description": "Checks if the specified css property of a given element has the expected value"
  },
  "elementPresent": {
    "prefix": "nwelementPresent",
    "body": "elementPresent(${1:selector}, ${2:optionalMessage})",
    "description": "Checks if the given element exists in the DOM"
  },
  "elementNotPresent": {
    "prefix": "nwelementNotPresent",
    "body": "elementNotPresent(${1:selector}, ${2:optionalMessage})",
    "description": "Checks if the given element does not exist in the DOM"
  },
  "hidden": {
    "prefix": "nwhidden",
    "body": "hidden(${1:selector}, ${2:optionalMessage})",
    "description": "Checks if the given element is not visible on the page"
  },
  "title": {
    "prefix": "nwtitle",
    "body": "title(${1:expected}, ${2:optionalMessage})",
    "description": "Checks if the page title equals the given value"
  },
  "titleContains": {
    "prefix": "nwtitleContains",
    "body": "titleContains(${1:expected}, ${2:optionalMessage})",
    "description": "titleContains(expected, optionalMessage)"
  },
  "urlContains": {
    "prefix": "nwurlContains",
    "body": "urlContains(${1:expected}, ${2:optionalMessage})",
    "description": "Checks if the current URL contains the given value"
  },
  "urlEquals": {
    "prefix": "nwurlEquals",
    "body": "urlEquals(${1:expected}, ${2:optionalMessage})",
    "description": "Checks if the current url equals the given value"
  },
  "value": {
    "prefix": "nwvalue",
    "body": "value(${1:expected}, ${2:optionalMessage})",
    "description": "Checks if the given form element's value equals the expected value"
  },
  "valueContains": {
    "prefix": "nwvalueContains",
    "body": "valueContains(${1:selector}, ${2:expected}, ${3:optionalMessage})",
    "description": "Checks if the given form element's value contains the expected value"
  },
  "visible": {
    "prefix": "nwvisible",
    "body": "visible(${1:selector}, ${2:optionalMessage})",
    "description": "Checks if the given element is visible on the page"
  },
  "waitForElementNotPresent": {
    "prefix": "nwwaitForElementNotPresent",
    "body": "waitForElementNotPresent(${1:optionalUsing}, ${2:selector}, ${3:optionalWaitForConditionTimeout}, ${4:optionalWaitForConditionPollInterval}, ${5:optionalAbortOnAssertionFailure}, ${6:optionalCallback}, ${7:optionalMessage})",
    "description": "Waits a given time in milliseconds (default 5000ms) for an element to be not present"
  },
  "waitForElementNotVisible": {
    "prefix": "nwwaitForElementNotVisible",
    "body": "waitForElementNotVisible(${1:optionalUsing}, ${2:selector}, ${3:optionalWaitForConditionTimeout}, ${4:optionalWaitForConditionPollInterval}, ${5:optionalAbortOnAssertionFailure}, ${6:optionalCallback}, ${7:optionalMessage})",
    "description": "Waits a given time in milliseconds (default 5000ms) for an element to be not visible"
  },
  "waitForElementPresent": {
    "prefix": "nwwaitForElementPresent",
    "body": "waitForElementPresent(${1:optionalUsing}, ${2:selector}, ${3:optionalWaitForConditionTimeout}, ${4:optionalWaitForConditionPollInterval}, ${5:optionalAbortOnAssertionFailure}, ${6:optionalCallback}, ${7:optionalMessage})",
    "description": "Waits a given time in milliseconds (default 5000ms) for an element to be present in the page"
  },
  "waitForElementVisible": {
    "prefix": "nwwaitForElementVisible",
    "body": "waitForElementVisible(${1:optionalUsing}, ${2:selector}, ${3:optionalWaitForConditionTimeout}, ${4:optionalWaitForConditionPollInterval}, ${5:optionalAbortOnAssertionFailure}, ${6:optionalCallback}, ${7:optionalMessage})",
    "description": "Waits a given time in milliseconds (default 5000ms) for an element to be visible in the page"
  },
  "element": {
    "prefix": "nwelement",
    "body": "element(${1:using}, ${2:value}, ${3:callback})",
    "description": "Search for an element on the page, starting from the document root"
  },
  "elements": {
    "prefix": "nwelements",
    "body": "elements(${1:using}, ${2:value}, ${3:callback})",
    "description": "Search for an element on the page, starting from the document root"
  },
  "elementIdEquals": {
    "prefix": "nwelementIdEquals",
    "body": "elementIdEquals(${1:webElementId}, ${2:otherId}, ${3:callback})",
    "description": "Test if two web element IDs refer to the same DOM element"
  },
  "elementIdElement": {
    "prefix": "nwelementIdElement",
    "body": "elementIdElement(${1:webElementId}, ${2:using}, ${3:value}, ${4:callback})",
    "description": "Search for an element on the page, starting from the identified element"
  },
  "elementIdElements": {
    "prefix": "nwelementIdElements",
    "body": "elementIdElements(${1:webElementId}, ${2:using}, ${3:value}, ${4:callback})",
    "description": "Search for multiple elements on the page, starting from the identified element"
  },
  "click": {
    "prefix": "nwclick",
    "body": "click(${1:optionalUsing}, ${2:selector}, ${3:optionalCallback})",
    "description": "Simulates a click event on the given DOM element"
  },
  "clearValue": {
    "prefix": "nwclearValue",
    "body": "clearValue(${1:selector}, ${2:optionalCallback})",
    "description": "Clear a textarea or a text input element's value"
  },
  "moveToElement": {
    "prefix": "nwmoveToElement",
    "body": "moveToElement(${1:selector}, ${2:xoffset}, ${3:yoffset}, ${4:optionalCallback})",
    "description": "Move the mouse by an offset of the specified element"
  },
  "setValue": {
    "prefix": "nwsetValue",
    "body": "setValue(${1:selector}, ${2:inputValue}, ${3:optionalCallback})",
    "description": "Sends some text to an element"
  },
  "submitForm": {
    "prefix": "nwsubmitForm",
    "body": "submitForm(${1:selector}, ${2:optionalCallback})",
    "description": "Submit a FORM element"
  },
  "keys": {
    "prefix": "nwkeys",
    "body": "submitForm(${1:keysToSend}, ${2:optionalCallback})",
    "description": "Send a sequence of key strokes to the active element"
  },
  "getAttribute": {
    "prefix": "nwgetAttribute",
    "body": "getAttribute(${1:selector}, ${2:attribute}, ${3:callback})",
    "description": "Retrieve the value of an attribute for a given DOM element"
  },
  "getCssProperty": {
    "prefix": "nwgetCssProperty",
    "body": "getCssProperty(${1:selector}, ${2:cssProperty}, ${3:callback})",
    "description": "Retrieve the value of a css property for a given DOM element"
  },
  "getElementSize": {
    "prefix": "nwgetElementSize",
    "body": "getElementSize(${1:selector}, ${2:callback})",
    "description": "Determine an element's size in pixels"
  },
  "getTagName": {
    "prefix": "nwgetTagName",
    "body": "getTagName(${1:selector}, ${2:callback})",
    "description": "Query for an element's tag name"
  },
  "getText": {
    "prefix": "nwgetText",
    "body": "getText(${1:optionalUsing}, ${2:selector}, ${3:callback})",
    "description": "Returns the visible text for the element"
  },
  "getValue": {
    "prefix": "nwgetValue",
    "body": "getValue(${1:selector}, ${2:callback})",
    "description": "Returns a form element current value"
  },
  "isVisible": {
    "prefix": "nwisVisible",
    "body": "isVisible(${1:selector}, ${2:callback})",
    "description": "Determine if an element is currently displayed"
  },
  "elementActive": {
    "prefix": "nwelementActive",
    "body": "elementActive(${1:callback})",
    "description": "Get the element on the page that currently has focus"
  },
  "getLocation": {
    "prefix": "nwgetLocation",
    "body": "getLocation(${1:selector}, ${2:callback})",
    "description": "Determine an element's location on the page"
  },
  "getLocationInView": {
    "prefix": "nwgetLocationInView",
    "body": "getLocationInView(${1:selector}, ${2:callback})",
    "description": "Determine an element's location on the screen once it has been scrolled into view"
  },
  "elementIdAttribute": {
    "prefix": "nwelementIdAttribute",
    "body": "elementIdAttribute(${1:webElementId}, ${2:attributeName}, ${3:callback})",
    "description": "Get the value of an element's attribute"
  },
  "elementIdCssProperty": {
    "prefix": "nwelementIdCssProperty",
    "body": "elementIdCssProperty(${1:webElementId}, ${2:cssPropertyName}, ${3:callback})",
    "description": "Retrieve the computed value of the given CSS property of the given element"
  },
  "elementIdClear": {
    "prefix": "nwelementIdClear",
    "body": "elementIdClear(${1:webElementId}, ${2:optionalCallback})",
    "description": "Attempts to clear its value, reset the checked state, or text content"
  },
  "elementIdClick": {
    "prefix": "nwelementIdClick",
    "body": "elementIdClick(${1:webElementId}, ${2:optionalCallback})",
    "description": "Scrolls into view the element and clicks the in-view center point"
  },
  "elementIdDisplayed": {
    "prefix": "nwelementIdDisplayed",
    "body": "elementIdDisplayed(${1:webElementId}, ${2:callback})",
    "description": "Determine if an element is currently displayed"
  },
  "elementIdEnabled": {
    "prefix": "nwelementIdEnabled",
    "body": "elementIdEnabled(${1:webElementId}, ${2:callback})",
    "description": "Determine if an element is currently enabled"
  },
  "elementIdLocationInView": {
    "prefix": "nwelementIdLocationInView",
    "body": "elementIdLocationInView(${1:webElementId}, ${2:optionalCallback})",
    "description": "Determine an element's location on the screen once it has been scrolled into view"
  },
  "elementIdLocation": {
    "prefix": "nwelementIdLocation",
    "body": "elementIdLocation(${1:webElementId}, ${2:callback})",
    "description": "Determine an element's location on the page"
  },
  "elementIdName": {
    "prefix": "nwelementIdName",
    "body": "elementIdName(${1:webElementId}, ${2:callback})",
    "description": "Retrieve the qualified tag name of the given element"
  },
  "elementIdSelected": {
    "prefix": "nwelementIdSelected",
    "body": "elementIdSelected(${1:webElementId}, ${2:callback})",
    "description": "Determine if an OPTION element, or an INPUT element of type checkbox or radio button is currently selected"
  },
  "elementIdSize": {
    "prefix": "nwelementIdSize",
    "body": "elementIdSize(${1:webElementId}, ${2:callback})",
    "description": "Determine an element's size in pixels"
  },
  "elementIdText": {
    "prefix": "nwelementIdText",
    "body": "elementIdText(${1:webElementId}, ${2:callback})",
    "description": "Returns the visible text for the element"
  },
  "elementIdValue": {
    "prefix": "nwelementIdValue",
    "body": "elementIdValue(${1:webElementId}, ${2:optionalValue}, ${3:callback})",
    "description": "sends the provided keys to the element, or returns the current value of the element"
  },
  "submit": {
    "prefix": "nwsubmit",
    "body": "submit(${1:webElementId}, ${2:optionalCallback})",
    "description": "Submit a FORM element"
  },
  "end": {
    "prefix": "nwend",
    "body": "end(${1:optionalCallback})",
    "description": "end(optionalCallback)"
  },
  "pause": {
    "prefix": "nwpause",
    "body": "pause(${1:2111ms}, ${2:optionalCallback})",
    "description": "pause(timems, optionalCallback)"
  },
  "perform": {
    "prefix": "nwperform",
    "body": "perform(${1:optionalCallback})",
    "description": "perform(optionalCallback)"
  },
  "useCss": {
    "prefix": "nwuseCss",
    "body": "useCss(${1:optionalCallback})",
    "description": "useCss(optionalCallback"
  },
  "useXpath": {
    "prefix": "nwuseXpath",
    "body": "useXpath(${1:optionalCallback})",
    "description": "useXpath(optionalCallback)"
  },
  "switchWindow": {
    "prefix": "nwswitchWindow",
    "body": "switchWindow(${1:handleOrName}, ${2:optionalCallback})",
    "description": "switchWindow(handleOrName, optionalCallback)"
  },
  "resizeWindow": {
    "prefix": "nwresizeWindow",
    "body": "resizeWindow(${1:width}, ${2:height}, ${3:optionalCallback})",
    "description": "resizeWindow(width, height, optionalCallback)"
  },
  "setWindowPosition": {
    "prefix": "nwsetWindowPosition",
    "body": "setWindowPosition(${1:offsetX}, ${2:offsetY}, ${3:optionalCallback})",
    "description": "setWindowPosition(offsetX, offsetY, optionalCallback)"
  },
  "maximizeWindow": {
    "prefix": "nwmaximizeWindow",
    "body": "maximizeWindow(${1:optionalCallback})",
    "description": "maximizeWindow(optionalCallback)"
  },
  "saveScreenshot": {
    "prefix": "nwsaveScreenshot",
    "body": "saveScreenshot(${1:fileName}, ${2:optionalCallback})",
    "description": "saveScreenshot(fileName, optionalCallback)"
  },
  "getTitle": {
    "prefix": "nwgetTitle",
    "body": "getTitle(${1:callback})",
    "description": "getTitle(callback)"
  },
  "closeWindow": {
    "prefix": "nwcloseWindow",
    "body": "closeWindow(${1:optionalCallback})",
    "description": "closeWindow(optionalCallback)"
  },
  "init": {
    "prefix": "nwinit",
    "body": "init(${1:URL}, ${2:optionalCallback})",
    "description": "init(URL, optionalCallback)"
  },
  "urlHash": {
    "prefix": "nwurlHash",
    "body": "urlHash(${1:hash}, ${2:optionalCallback})",
    "description": "urlHash(hash, optionalCallback)"
  },
  "getCookies": {
    "prefix": "nwgetCookies",
    "body": "getCookies(${1:callback})",
    "description": "getCookies(callback)"
  },
  "getCookie": {
    "prefix": "nwgetCookie",
    "body": "getCookie(${1:cookieName}, ${2:callback})",
    "description": "getCookie(cookieName, callback)"
  },
  "setCookie": {
    "prefix": "nwsetCookie",
    "body": "setCookie(${1:cookieObject}, ${2:optionalCallback})",
    "description": "setCookie(cookieObject, optionalCallback)"
  },
  "deleteCookie": {
    "prefix": "nwdeleteCookie",
    "body": "deleteCookie(${1:cookieName}, ${2:callback})",
    "description": "deleteCookie(cookieName, callback)"
  },
  "deleteCookies": {
    "prefix": "nwdeleteCookies",
    "body": "deleteCookies(${1:optionalCallback})",
    "description": "deleteCookies(optionalCallback)"
  },
  "injectScript": {
    "prefix": "nwinjectScript",
    "body": "injectScript(${1:scriptUrl}, ${2:id}, ${3:optionalCallback})",
    "description": "injectScript(scriptUrl, id, optionalCallback)"
  },
  "getLogTypes": {
    "prefix": "nwgetLogTypes",
    "body": "getLogTypes(${1:callback})",
    "description": "getLogTypes(callback)"
  },
  "getLog": {
    "prefix": "nwgetLog",
    "body": "getLog(${1:typeString}, ${2:callback})",
    "description": "getLog(typeString, callback)"
  },
  "isLogAvailable": {
    "prefix": "nwisLogAvailable",
    "body": "isLogAvailable(${1:typeString}, ${2:callback})",
    "description": "isLogAvailable(typeString, callback)"
  }
}